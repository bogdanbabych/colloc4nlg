Long-term Purpose: developing CSAR analogue in Python
  --> project for MWEs, engine for combinatory field model +
  --> for industrial implementations

  --> for construction grammar induction, etc.
  >> answering fundamental questions in linguistics


  >> nature of linguistic research...



structure of SCAR
  [*.html] (internet.html)
    - parameters(
      + corpus selection;
      [printparams.js]

      - colloc4nlg
      - conc
      - colloc

  [cqp.pl] (cqp4nlg.pl)
    + {getting parameters}
    + ($contextsize, $contexttype)=$contextsize=~/(\d+)\s*(\w*)/;
    + {print html header}

    - collocation4nlg

    + $searchstring=makecqpquery($originalquery)
    + @corpuslist=split ',', $corpuslist;
    + foreach $corpus (@corpuslist) {
        $numoccur+=processcorpus($corpus, $searchstring); }

        % development:
        % prepare search string --> in Perl / Python / JavaScript
        >> for each -- SearchString :: form search strings ; then process them one after the other in a normal routine;
        >> keep collecting collocation statistics... >>>

        
        
        
Development notes:


further stage:
    - keyword -> pattern automation
    - pattern extraction automation (using Stanford parser output, etc)
    
    
    principle of the interface:
        - keyword is typed in
        matched patterns are extracted ; presented; selected --> 
        
        
        chosen patterns are used in generation of local contexts
        
        patterns are chained, (top) results of the previous search are used for further search 
            >> co-occurrence filter / ranking needed >> should make sense... ?

    >> understanding the need and the requirements for the combinatory field model...
    
    
    
Notes -- tasks by 14 Dec 2018
    - right hand side direction
    - recovery :: failed match
    - verification cross-matching mechanism;
    - ranking >> off-line; on-line, etc. collocation ranking
    
    (0) filtering of numerals
    
    >> construction grammar theoretical framework...
    
    
    27/12/2018
    - fixing issues with scores, etc.
    - printing -- references?
    
    // initial things
    --> then :: one position+multiple collocations
                multiple positions + multiple collocations development
                
                
                >> scoring, etc.
                
    - right hand side 
    
    - multiple keywords
    
    removing items from the list:
        valid? + resubmit query
        interface for this - command line
        
        
        28350 instances found --> when the beam search did not work...
        20250 --> after beam search cutoff...
        
        injecting words
        removing words --> command line interface >> implementing in JavaScript; 
        
        
        WP V.* J.* IN DT J.* !deal/NN
      --> WP V.* J.*=;valid,;good IN=:to,:of DT J.* !deal/NN
      WP V.* J.*=;valid IN=:to,:from DT J.* !deal/NN  
        
    
    * 30/12/2018
    
    
    implementation notes:
    1. end-to-end system:
        - keyword extraction;
        - patterns selection;
        - pattern population + ranking 
        - running patterns on collocations
        - filtering + interpreting results;
        >> interactive loop
        
    2. focus on implementation + Lingenio
    
    3. immediate stage: a 2D data structure --> proper implementation and usage; populating with lexical choices; 
            - potentially populating wiht structure
            
    4. be ready to move to Pyton implementation --> development framework...
    
    word embedding externsions
        >> combinatory field model;
        >> experimental research 
        >> construction grammar; 
        
        
    
    
    
    
    